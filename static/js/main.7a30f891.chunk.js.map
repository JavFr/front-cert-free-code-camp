{"version":3,"sources":["logo.svg","quotes.js","components/renderQuote.jsx","components/quoteBox.jsx","components/quoteMachine.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","QUOTES","quote","author","RenderQuote","props","className","size","icon","md","id","QuoteBox","twitterQuote","concat","replace","color","onClick","newQuoteAction","floating","tag","href","fab","QuoteMachine","useState","Math","floor","length","random","changeQuote","lg","randomQuote","newQuoteIndex","indexOf","App","collapse","toggle","dark","expand","fixed","isOpen","navbar","right","active","to","path","style","minHeight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a30f891.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","export const QUOTES = [\n    {\n        quote: 'La mejor custodia de un hombre es su propia conciencia',\n        author: 'Arturo Illia'\n    },\n    {\n        quote: 'La naturaleza nunca se apresura y sin embargo no deja nada sin hacer',\n        author: 'Lao Tzu'\n    },\n    {\n        quote: 'Somos lo que hacemos día a día, de modo que la excelencia no es un acto, si no un hábito',\n        author: 'Aristóteles'\n    },\n    {\n        quote: 'No conozco ningún hecho más alentador que la incuestionable capacidad del hombre para dignificar su vida por medio del esfuerzo consciente',\n        author: 'Henry David Thoreau'\n    },\n    {\n        quote: 'No hay en todo el mundo un triunfo verdadero que pueda separarse de la dignidad en el vivir',\n        author: 'David Starr Jordan'\n    }\n]","import React from 'react'\nimport { MDBIcon, MDBRow, MDBCol } from 'mdbreact'\n\nconst RenderQuote = (props) => {\n    return(\n        <MDBRow className=''>\n            <MDBCol size='1'>\n                <MDBIcon icon=\"quote-left\" size='3x'/>\n            </MDBCol>\n            <MDBCol size='12' md='10'>\n            <p className=\"h2 my-3 text-center px-2\" id='text'>{props.quote}</p>\n            </MDBCol>\n            <MDBCol size='12' md='1' className='d-flex justify-content-end'>\n                <MDBIcon icon=\"quote-right\" size='3x' />\n            </MDBCol>\n            <MDBCol size='12' className='d-flex justify-content-end mt-3'>\n                <p className=\"h4 mr-2\" id='author'>{props.author}</p>\n            </MDBCol>\n        </MDBRow>\n    );\n}\n\nexport default RenderQuote;","import React from 'react'\nimport { MDBContainer, MDBBtn, MDBIcon, MDBCard, MDBCardText, MDBCardBody, MDBRow, MDBCol } from 'mdbreact'\nimport RenderQuote from './renderQuote';\n\nconst QuoteBox = (props) => {\n\n    const twitterQuote = '%22'\n            .concat(props.quote)\n            .concat('.%22 ')\n            .concat(props.author)\n            .replace(/\\s/g, '%20');\n\n    return(\n        <MDBCard id='quote-box' className='py-3'>\n            <MDBCardBody>\n            <MDBCardText>\n                <RenderQuote quote={props.quote} author={props.author}/>\n            </MDBCardText>\n            </MDBCardBody>\n            <MDBRow className=\"text-center justify-items-center\">\n                <MDBCol>\n                    <MDBBtn id='new-quote' color=\"pink\" onClick={props.newQuoteAction}>\n                        New Quote\n                    </MDBBtn>\n                </MDBCol>\n                <MDBCol>    \n                    <MDBBtn floating tag='a' id='tweet-quote' href={'https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=' + twitterQuote}>\n                        <MDBIcon size='2x' fab icon=\"twitter\" />\n                    </MDBBtn>\n                </MDBCol>  \n            </MDBRow>\n      </MDBCard>\n    )\n}\n\nexport default QuoteBox","import React, { useState } from 'react';\nimport { MDBContainer, MDBRow, MDBCol } from 'mdbreact';\nimport { QUOTES } from '../quotes';\nimport QuoteBox from './quoteBox';\n\n\nconst QuoteMachine = () => {\n\n    const [quote, changeQuote] = useState(\n        QUOTES[Math.floor(QUOTES.length * Math.random())]\n    )\n\n    const randomQuote = () => {\n\n        const newQuoteIndex = Math.floor(QUOTES.length * Math.random())\n\n        return QUOTES.indexOf(quote) === newQuoteIndex ? randomQuote() : newQuoteIndex\n    }\n\n    return (\n        <MDBContainer className='d-flex align-items-center justify-content-center bg-default' >\n            <MDBRow className='justify-content-center'>\n                <MDBCol size='12' md='10' lg='8'>\n                    <QuoteBox quote={quote.quote} author={quote.author} newQuoteAction={() => changeQuote(QUOTES[randomQuote()])}/>\n                </MDBCol>\n            </MDBRow>\n        </MDBContainer>\n    );\n}\nexport default QuoteMachine;","import React, {useState} from 'react';\nimport QuoteMachine from './components/quoteMachine';\nimport logo from './logo.svg';\nimport './App.css';\nimport ReactFCCtest from 'react-fcctest';\nimport { MDBContainer, MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavbarToggler, MDBCollapse, MDBNavItem, MDBNavLink, MDBIcon } from 'mdbreact';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nfunction App() {\n\n  const [collapse, toggle] = useState(false);\n\n  return (\n    <Router>\n      <MDBNavbar dark expand=\"md\" fixed=\"top\">\n              <MDBNavbarToggler onClick={ () => toggle(!collapse) } />\n              <MDBCollapse isOpen = { collapse } navbar>\n                <MDBNavbarNav right>\n                  <MDBNavItem active>\n                      <MDBNavLink to=\"/\">RandomQuoteMachine</MDBNavLink>\n                  </MDBNavItem>\n                  <MDBNavItem>\n                      <MDBNavLink to=\"/2\" className='disabled'>Assignment 2</MDBNavLink>\n                  </MDBNavItem>\n                  <MDBNavItem>\n                      <MDBNavLink to=\"/3\" className='disabled'>Assignment 3</MDBNavLink>\n                  </MDBNavItem>\n                  <MDBNavItem>\n                    <MDBNavLink to=\"/4\" className='disabled'>Assignment 4</MDBNavLink>\n                  </MDBNavItem>\n                </MDBNavbarNav>\n                <MDBNavbarNav right>\n                  <MDBNavItem>\n                    <a className='nav-link' href=\"https://www.linkedin.com/in/javfr/\"><MDBIcon fab icon=\"linkedin\" size='2x'/></a>\n                  </MDBNavItem>\n                  <MDBNavItem>\n                    <a className='nav-link' href=\"https://github.com/JavFr/\"><MDBIcon fab icon=\"github\" size='2x' /></a>\n                  </MDBNavItem>\n                  <MDBNavItem>\n                    <a className='nav-link' href=\"https://www.freecodecamp.org/javfr\" ><MDBIcon fab icon=\"free-code-camp\" size='2x'/></a>\n                  </MDBNavItem>\n                </MDBNavbarNav>\n              </MDBCollapse>\n            </MDBNavbar>\n      <ReactFCCtest />\n      <Switch>\n        <Route path=\"/2\">\n          <div className='d-flex align-items-center bg-default' style={{minHeight: '100vh'}}>\n            \n          </div>\n        </Route>\n        <Route path=\"/\">\n          <div className='d-flex align-items-center bg-default' style={{minHeight: '100vh'}}>\n            <QuoteMachine />\n          </div>\n        </Route>\n      </Switch>\n    </Router>  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}